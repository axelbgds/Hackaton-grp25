import User from "../models/User.js";
import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";
import crypto from "crypto";

// üìù Inscription
export const registerUser = async (req, res) => {
    console.log("üì¢ Route atteinte")
    try {
        console.log("üì© Requ√™te re√ßue pour l'inscription", req.body);
        const { username, email, password } = req.body;

        // V√©rifier si l'utilisateur existe
        const userExists = await User.findOne({ email });
        console.log("üîç V√©rification de l'existence de l'utilisateur", userExists);
        if (userExists) {
            console.log("‚ö†Ô∏è Email d√©j√† utilis√©");
            return res.status(400).json({ message: "Email d√©j√† utilis√©" });
        }

        // Cr√©er un nouvel utilisateur
        const user = await User.create({ username, email, password });
        console.log("‚úÖ Utilisateur cr√©√© avec succ√®s", user);

        res.status(201).json({ message: "Utilisateur cr√©√© avec succ√®s !" });
    } catch (error) {
        console.error("‚ùå Erreur serveur", error);
        res.status(500).json({ message: "Erreur serveur" });
    }
};

// üîë Connexion
export const loginUser = async (req, res) => {
    try {
        console.log("üì© Donn√©es re√ßues :", req.body);

        const { email, password } = req.body;
        const user = await User.findOne({ email });

        if (!user) {
            return res.status(400).json({ message: "Email ou mot de passe incorrect" });
        }

        console.log("‚úÖ Utilisateur trouv√© :", user);

        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            return res.status(400).json({ message: "Email ou mot de passe incorrect" });
        }

        console.log("üîë Connexion r√©ussie, g√©n√©ration du token...");
        const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });

        res.json({ token, user });
    } catch (error) {
        res.status(500).json({ message: "Erreur serveur" });
    }
};

// üîì D√©connexion
export const logoutUser = async (req, res) => {
    res.json({ message: "D√©connexion r√©ussie !" });
};

// üìå Obtenir un profil utilisateur
export const getUserProfile = async (req, res) => {
    try {
        const user = await User.findById(req.params.id).select("-password");
        if (!user) return res.status(404).json({ message: "Utilisateur non trouv√©" });
        res.json(user);
    } catch (error) {
        res.status(500).json({ message: "Erreur serveur" });
    }
};

// ‚úèÔ∏è Modifier le profil utilisateur (photo de profil, banni√®re, pseudo, bio)
export const updateUserProfile = async (req, res) => {
    try {
        const { username, profilePic, bannerPic, bio } = req.body;
        const user = await User.findById(req.user.id);

        if (!user) {
            return res.status(404).json({ message: "Utilisateur non trouv√©" });
        }

        if (username) user.username = username;
        if (profilePic) user.profilePic = profilePic;
        if (bannerPic) user.bannerPic = bannerPic;
        if (bio) user.bio = bio;

        await user.save();

        res.json({ message: "Profil mis √† jour avec succ√®s", user });
    } catch (error) {
        res.status(500).json({ message: "Erreur serveur" });
    }
};

// ‚ûï Suivre un utilisateur
export const followUser = async (req, res) => {
    try {
        const userToFollow = await User.findById(req.params.id);
        const currentUser = await User.findById(req.user.id);

        if (!userToFollow || currentUser.following.includes(userToFollow._id)) {
            return res.status(400).json({ message: "D√©j√† suivi" });
        }

        currentUser.following.push(userToFollow._id);
        userToFollow.followers.push(currentUser._id);
        await currentUser.save();
        await userToFollow.save();

        res.json({ message: "Utilisateur suivi avec succ√®s !" });
    } catch (error) {
        res.status(500).json({ message: "Erreur serveur" });
    }
};

// ‚ûñ Ne plus suivre un utilisateur
export const unfollowUser = async (req, res) => {
    try {
        const userToUnfollow = await User.findById(req.params.id);
        const currentUser = await User.findById(req.user.id);

        if (!userToUnfollow || !currentUser.following.includes(userToUnfollow._id)) {
            return res.status(400).json({ message: "Utilisateur non suivi" });
        }

        currentUser.following = currentUser.following.filter(id => id.toString() !== userToUnfollow._id.toString());
        userToUnfollow.followers = userToUnfollow.followers.filter(id => id.toString() !== currentUser._id.toString());

        await currentUser.save();
        await userToUnfollow.save();

        res.json({ message: "Utilisateur retir√© de la liste des suivis" });
    } catch (error) {
        res.status(500).json({ message: "Erreur serveur" });
    }
};

// üîÑ R√©initialisation du mot de passe
export const resetPassword = async (req, res) => {
    try {
        const { email } = req.body;
        const user = await User.findOne({ email });

        if (!user) {
            return res.status(404).json({ message: "Utilisateur non trouv√©" });
        }

        const newPassword = crypto.randomBytes(6).toString("hex");
        user.password = await bcrypt.hash(newPassword, 10);
        await user.save();

        res.json({ message: "Mot de passe r√©initialis√© avec succ√®s", newPassword });
    } catch (error) {
        res.status(500).json({ message: "Erreur serveur" });
    }
};

// üîë Changer son mot de passe
export const changePassword = async (req, res) => {
    try {
        const { oldPassword, newPassword } = req.body;
        const user = await User.findById(req.user.id);

        if (!user) {
            return res.status(404).json({ message: "Utilisateur non trouv√©" });
        }

        const isMatch = await bcrypt.compare(oldPassword, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: "Ancien mot de passe incorrect" });
        }

        user.password = await bcrypt.hash(newPassword, 10);
        await user.save();

        res.json({ message: "Mot de passe mis √† jour avec succ√®s" });
    } catch (error) {
        res.status(500).json({ message: "Erreur serveur" });
    }
};

// üîç Rechercher des utilisateurs
export const searchUsers = async (req, res) => {
    try {
        const { query } = req.query;
        const users = await User.find({ username: new RegExp(query, "i") }).select("-password");

        res.json(users);
    } catch (error) {
        res.status(500).json({ message: "Erreur serveur" });
    }
};

// üìã R√©cup√©rer tous les utilisateurs
export const getAllUsers = async (req, res) => {
    try {
        const users = await User.find().select("-password");
        res.json(users);
    } catch (error) {
        res.status(500).json({ message: "Erreur serveur" });
    }
};

// üë• R√©cup√©rer les abonn√©s d'un utilisateur
export const getUserFollowers = async (req, res) => {
    try {
        const user = await User.findById(req.params.id).populate("followers", "username profilePic");
        res.json(user.followers);
    } catch (error) {
        res.status(500).json({ message: "Erreur serveur" });
    }
};

// üë• R√©cup√©rer la liste des abonnements d'un utilisateur
export const getUserFollowing = async (req, res) => {
    try {
        const user = await User.findById(req.params.id).populate("following", "username profilePic");
        res.json(user.following);
    } catch (error) {
        res.status(500).json({ message: "Erreur serveur" });
    }
};

// üìõ Bloquer un utilisateur
export const blockUser = async (req, res) => {
    try {
        // V√©rification si req.user est d√©fini
        if (!req.user) {
            console.error('Utilisateur non authentifi√©');
            return res.status(401).json({ message: "Utilisateur non authentifi√©" });
        }

        console.log('D√©but de la fonction blockUser');
        
        // Recherche de l'utilisateur √† bloquer
        const userToBlock = await User.findById(req.params.id);
        console.log('Utilisateur √† bloquer :', userToBlock);

        if (!userToBlock) {
            console.error('Utilisateur non trouv√©');
            return res.status(404).json({ message: "Utilisateur non trouv√©" });
        }

        // V√©rification si l'utilisateur est d√©j√† bloqu√©
        const alreadyBlocked = req.user.blockedUsers.includes(req.params.id);
        console.log('Utilisateur d√©j√† bloqu√© ?', alreadyBlocked);

        if (alreadyBlocked) {
            console.error('Cet utilisateur est d√©j√† bloqu√©');
            return res.status(400).json({ message: "Cet utilisateur est d√©j√† bloqu√©" });
        }

        // Bloquer l'utilisateur
        req.user.blockedUsers.push(req.params.id);
        await req.user.save();
        console.log('Utilisateur bloqu√© avec succ√®s', req.user);

        // R√©pondre avec un message de succ√®s
        res.json({ message: `Utilisateur ${userToBlock.username} bloqu√© avec succ√®s` });
    } catch (error) {
        console.error('Erreur serveur:', error);
        res.status(500).json({ message: "Erreur serveur" });
    }
};



// üîì D√©bloquer un utilisateur
export const unblockUser = async (req, res) => {
    try {
        if (!req.user) {
            console.error('Utilisateur non authentifi√©');
            return res.status(401).json({ message: "Utilisateur non authentifi√©" });
          }
        
        const userToUnblock = await User.findById(req.params.id);
        
        if (!userToUnblock) return res.status(404).json({ message: "Utilisateur non trouv√©" });

       const blockedIndex = req.user.blockedUsers.indexOf(req.params.id);
        if (blockedIndex === -1) {
            return res.status(400).json({ message: "Cet utilisateur n'est pas bloqu√©" });
        }

         req.user.blockedUsers.splice(blockedIndex, 1);
        await req.user.save();

        res.json({ message: `Utilisateur ${userToUnblock.username} d√©bloqu√© avec succ√®s` });
    } catch (error) {
        res.status(500).json({ message: "Erreur serveur" });
    }
};
